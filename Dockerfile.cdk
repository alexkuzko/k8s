ARG ALPINE_VERSION=3.18

# Ignore to update versions here (and after FROM alpine line below), example:
# docker build --no-cache --build-arg KUBECTL_VERSION=1.27.3 -t alexkuzko/k8s:1.27.3 -t alexkuzko/k8s:1.27 .
# to build AWS CDK based on Node LTS image:
# docker build --no-cache --build-arg KUBECTL_VERSION=1.27.3 -t alexkuzko/k8s-cdk:1.27.3 -t alexkuzko/k8s-cdk:1.27 -f Dockerfile.cdk .

# replaced python image with node image as it will be easier to install python than compile node
#FROM python:3.11.4-alpine${ALPINE_VERSION}
FROM node:lts-alpine${ALPINE_VERSION}

ARG AWS_CLI_VERSION=2.12.4
ARG HELM_VERSION=3.12.0
ARG KUBECTL_VERSION=1.27.3
ARG KUSTOMIZE_VERSION=v5.1.0
ARG KUBESEAL_VERSION=0.22.0
# gcr.io/google.com/cloudsdktool/google-cloud-cli
ARG CLOUD_SDK_VERSION=437.0.0
ARG AWSCDK_VERSION=2.85.0

# Install helm (latest release)
# ENV BASE_URL="https://storage.googleapis.com/kubernetes-helm"
ENV BASE_URL="https://get.helm.sh"
ENV TAR_FILE="helm-v${HELM_VERSION}-linux-amd64.tar.gz"
RUN apk add --update --no-cache curl ca-certificates bash git && \
    curl -sL ${BASE_URL}/${TAR_FILE} | tar -xvz && \
    mv linux-amd64/helm /usr/bin/helm && \
    chmod +x /usr/bin/helm && \
    rm -rf linux-amd64 && \
    rm -rf /var/cache/apk/*

# add helm-diff
RUN helm plugin install https://github.com/databus23/helm-diff && rm -rf /tmp/helm-*

# add helm-unittest
RUN helm plugin install https://github.com/quintush/helm-unittest && rm -rf /tmp/helm-*

# add helm-push
RUN helm plugin install https://github.com/chartmuseum/helm-push && rm -rf /tmp/helm-*

# Install kubectl (same version of aws esk)
RUN curl -sLO https://storage.googleapis.com/kubernetes-release/release/v${KUBECTL_VERSION}/bin/linux/amd64/kubectl && \
    mv kubectl /usr/bin/kubectl && \
    chmod +x /usr/bin/kubectl

# Install kustomize (latest release)
RUN curl -sLO https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2F${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz && \
    tar xvzf kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz && \
    mv kustomize /usr/bin/kustomize && \
    chmod +x /usr/bin/kustomize

# Install eksctl (latest version)
RUN curl -sL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && \
    mv /tmp/eksctl /usr/bin && \
    chmod +x /usr/bin/eksctl

# copy compiled awscli v2 (replaced with alpine compatible glibc)
#COPY --from=builder /usr/local/aws-cli/ /usr/local/aws-cli/
#COPY --from=builder /aws-cli-bin/ /usr/local/bin/
# Install awscli v2
# https://github.com/aws/aws-cli/issues/4685#issuecomment-615872019
# install glibc compatibility for alpine
ENV GLIBC_VER=2.34-r0
# override aws-cli v2 default pager
ENV AWS_PAGER=""
RUN apk --no-cache add \
        binutils \
        curl \
    && curl -sL https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \
    && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-${GLIBC_VER}.apk \
    && curl -sLO https://github.com/sgerrand/alpine-pkg-glibc/releases/download/${GLIBC_VER}/glibc-bin-${GLIBC_VER}.apk \
    && apk add --force-overwrite --no-cache \
        glibc-${GLIBC_VER}.apk \
        glibc-bin-${GLIBC_VER}.apk \
    && curl -sL https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWS_CLI_VERSION}.zip -o awscliv2.zip \
    && unzip awscliv2.zip \
    && aws/install \
    && rm -rf \
        awscliv2.zip \
        aws \
        /usr/local/aws-cli/v2/*/dist/aws_completer \
        /usr/local/aws-cli/v2/*/dist/awscli/data/ac.index \
        /usr/local/aws-cli/v2/*/dist/awscli/examples \
    && apk --no-cache del \
        binutils \
    && rm glibc-${GLIBC_VER}.apk \
    && rm glibc-bin-${GLIBC_VER}.apk \
    && rm -rf /var/cache/apk/*

# Install jq
RUN apk add --update --no-cache jq yq && \
    rm -rf /var/cache/apk/*

# Install for envsubst
RUN apk add --update --no-cache gettext && \
    rm -rf /var/cache/apk/*

# Install python3
RUN apk add --update --no-cache python3 python3-dev && \
    python3 -m ensurepip && \
    pip3 install --upgrade pip && \
    pip3 install boto3 json-spec yamllint && \
    rm -rf /var/cache/apk/*

# Install aws-cdk
RUN npm i --location=global npm
RUN npm i --location=global aws-cdk@${AWSCDK_VERSION}

# Install kubeseal
RUN curl -L https://github.com/bitnami-labs/sealed-secrets/releases/download/v${KUBESEAL_VERSION}/kubeseal-${KUBESEAL_VERSION}-linux-amd64.tar.gz -o - | tar xz -C /usr/bin/ && \
    chmod +x /usr/bin/kubeseal

# Install gcloud
RUN curl --silent --fail --show-error -L -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz && \
    mkdir -p /google && \
    tar xzf google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz -C /google && \
    rm -f google-cloud-sdk-${CLOUD_SDK_VERSION}-linux-x86_64.tar.gz && \
    /google/google-cloud-sdk/bin/gcloud config set core/disable_usage_reporting true && \
    /google/google-cloud-sdk/bin/gcloud config set component_manager/disable_update_check true && \
    /google/google-cloud-sdk/bin/gcloud components install --quiet gke-gcloud-auth-plugin

# Needed to use new GKE auth mechanism for kubeconfig
ENV USE_GKE_GCLOUD_AUTH_PLUGIN=True

# Final PATH environment variable
ENV PATH="/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/google/google-cloud-sdk/bin"

ENTRYPOINT ["/bin/ash", "-c"]
